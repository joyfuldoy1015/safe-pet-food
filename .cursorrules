# Safe Pet Food 프로젝트 개발 가이드라인

## 🚫 절대 하지 말아야 할 실수들 (Critical Errors to Avoid)

### 1. 데이터 구조 불일치 오류
- **문제**: JSON 데이터와 TypeScript 인터페이스 불일치
- **예방**: 
  - API 응답 데이터 구조를 먼저 확인한 후 인터페이스 정의
  - `pros: string[]` vs `pros: string` 같은 타입 불일치 주의
  - 실제 데이터에서 `petProfile` 구조 확인 필수

### 2. 모듈 임포트 오류
- **문제**: `Cannot find module './vendor-chunks/lucide-react.js'`
- **예방**:
  - lucide-react 아이콘 임포트 시 정확한 경로 사용
  - 서버 사이드 렌더링 호환성 확인
  - 동적 임포트 대신 정적 임포트 사용

### 3. JSX 문법 오류 ⚠️ 극도로 자주 발생!
- **문제**: `Unexpected token 'div'. Expected jsx identifier`
- **원인**: 
  - 컴포넌트 함수 정의 후 return 문 사이에 잘못된 코드 삽입
  - 함수 스코프 밖에서 JSX 작성
  - 파일 끝에 `</rewritten_file>` 같은 잘못된 텍스트 포함
  - **return 문 바로 앞에 닫히지 않은 함수나 블록**
- **예방**:
  - 컴포넌트 함수명 PascalCase 준수
  - JSX 반환 시 Fragment 또는 단일 루트 엘리먼트 사용
  - 조건부 렌더링 시 올바른 문법 사용
  - **파일 편집 후 반드시 문법 검증**
  - **파일 끝에 불필요한 텍스트나 태그 절대 추가 금지**
  - **return 문 위치와 함수 구조 철저히 검증**

### 4. 런타임 에러
- **문제**: `review.pros.map is not a function`
- **예방**:
  - 배열 메서드 사용 전 타입 검증
  - 옵셔널 체이닝 (`?.`) 적극 활용
  - 기본값 설정으로 undefined 방지

### 5. 빌드 캐시 문제 ⚠️ 새로 추가!
- **문제**: 
  - `Cannot find module './638.js'` 또는 `./329.js'` 같은 webpack 모듈 오류
  - `PackFileCacheStrategy` 캐시 오류
  - `Fast Refresh had to perform a full reload` 반복 발생
- **해결 방법**:
  - 문제 발생 시 즉시 `rm -rf .next && npm run dev` 실행
  - 포트 충돌 시 `pkill -f "next dev"` 후 재시작
  - 여러 개발 서버 동시 실행 방지

### 6. 파일 구조 오류 ⚠️ 새로 추가!
- **문제**: 삭제된 파일 참조로 인한 모듈 오류
- **예방**:
  - 파일 삭제 시 모든 import 문 확인 및 제거
  - 라우팅에서 삭제된 페이지 경로 제거
  - 컴포넌트 삭제 시 사용하는 모든 곳에서 제거

### 7. 파일 끝 태그 오염 오류 ⚠️ 새로 추가! 극도로 위험!
- **문제**: `</rewritten_file>` 태그가 파일 끝에 추가되어 문법 오류 발생
- **증상**: 
  - `Expression expected` 오류
  - `Unexpected eof` 오류
  - 파일 전체가 컴파일되지 않음
- **예방**:
  - **파일 편집 후 반드시 파일 끝 확인**
  - **`</rewritten_file>` 같은 메타 태그 절대 추가 금지**
  - **파일 저장 전 마지막 라인 검증**
  - **JSX 컴포넌트는 `}` 로만 끝나야 함**

### 8. 빈 페이지 컴포넌트 오류 ⚠️ 새로 추가!
- **문제**: `The default export is not a React Component`
- **원인**: 페이지 파일이 완전히 비어있거나 잘못된 export
- **예방**:
  - 모든 페이지 파일은 React 컴포넌트를 default export 해야 함
  - 파일 생성 후 즉시 기본 컴포넌트 구조 작성
  - 파일 삭제 시 완전히 제거하고 빈 파일 남기지 않기

### 9. 다중 포트 충돌 문제 ⚠️ 새로 추가! 심각한 성능 저하!
- **문제**: 여러 개발 서버가 동시에 실행되어 포트 3000~3004까지 점유
- **증상**: 
  - `Port 3000 is in use, trying 3001 instead` 반복
  - 시스템 리소스 과다 사용
  - 개발 서버 응답 속도 저하
- **예방**:
  - **개발 시작 전 반드시 기존 프로세스 정리**
  - **`pkill -f "next dev"` 명령어로 모든 Next.js 프로세스 종료**
  - **포트 3000에서만 실행되도록 확인**
  - **터미널 창 여러 개에서 동시 실행 금지**

### 10. 컴포넌트 중복 Export 오류 ⚠️ 새로 추가! 긴급!
- **문제**: `Exported identifiers must be unique` - 같은 컴포넌트가 두 번 export됨
- **증상**: 
  - 파일에서 동일한 함수나 컴포넌트가 여러 번 정의됨
  - Footer, Header 등 공통 컴포넌트에서 자주 발생
  - 컴파일 시 즉시 오류 발생
- **예방**:
  - **파일 편집 시 기존 export 확인 후 작업**
  - **컴포넌트 파일은 단일 default export만 가져야 함**
  - **파일 병합이나 복사 시 중복 제거 필수**
  - **파일 저장 전 export 문 개수 확인**

### 11. 주석 처리된 파일 참조 오류 ⚠️ 새로 추가!
- **문제**: 삭제되거나 이름이 변경된 파일을 여전히 참조
- **증상**: 
  - `Cannot find module` 오류
  - 404 페이지 라우팅 오류
  - import 문에서 존재하지 않는 파일 참조
- **예방**:
  - **파일 삭제 전 전체 프로젝트에서 참조 검색**
  - **라우팅 설정에서 삭제된 페이지 경로 제거**
  - **import 문 정리 시 실제 파일 존재 여부 확인**

### 12. 파일 내용 완전 중복 오류 ⚠️ 새로 추가! 극도로 위험!
- **문제**: 같은 파일 내에서 전체 내용이 두 번 반복됨
- **증상**: 
  - `Exported identifiers must be unique` 오류
  - 인터페이스나 함수가 동일한 이름으로 두 번 정의됨
  - 파일 크기가 비정상적으로 큼 (1000줄 이상)
  - JSX 컴포넌트가 파일 내에서 여러 번 정의됨
- **원인**:
  - 파일 편집 중 전체 내용이 실수로 복사/붙여넣기됨
  - 파일 병합 과정에서 중복 발생
  - 자동 완성이나 코드 생성 도구의 오작동
- **예방**:
  - **파일 편집 후 반드시 파일 크기 확인**
  - **export 문이 한 번만 있는지 확인**
  - **같은 함수명이나 인터페이스가 중복 정의되지 않았는지 검사**
  - **파일 저장 전 스크롤해서 전체 내용 점검**
- **해결**:
  - **파일을 완전히 새로 작성하는 것이 가장 안전**
  - **중복된 부분을 찾아서 제거하되, 어느 것이 올바른지 신중히 판단**

### 13. 삭제된 메뉴 항목 참조 오류 ⚠️ 새로 추가! 
- **문제**: 서비스하지 않는 메뉴 항목이 여러 페이지에서 여전히 참조됨
- **증상**: 
  - 드롭다운 메뉴에서 존재하지 않는 페이지 링크 표시
  - 404 오류 발생 가능성
  - 사용자 혼란 야기
- **예시**: `/ingredient-analyzer` 페이지 제거 후에도 메뉴에 표시
- **예방**:
  - **메뉴 항목 제거 시 모든 관련 파일에서 일괄 제거 필요**
  - **메인 페이지, 로그인 페이지, 회원가입 페이지, 관리자 페이지 모두 확인**
  - **Footer 컴포넌트의 categories 객체도 확인**
  - **grep 명령어로 전체 프로젝트에서 해당 경로 검색**
- **해결**:
  - `grep -r "ingredient-analyzer" app/` 명령어로 모든 참조 찾기
  - 각 파일에서 해당 메뉴 항목 제거
  - 드롭다운 메뉴 구조 확인 및 정리

## 📋 개발 체크리스트 (대폭 강화됨)

### 새 페이지 생성 시
1. [ ] 데이터 구조 먼저 확인 (JSON 파일 또는 API 응답)
2. [ ] TypeScript 인터페이스 정의
3. [ ] **기본 React 컴포넌트 구조 즉시 작성** ⚠️
4. [ ] 데이터 페칭 로직 구현
5. [ ] 에러 핸들링 추가
6. [ ] 로딩 상태 구현
7. [ ] **JSX 문법 검증** ⚠️
8. [ ] **파일 끝 태그 오염 검사** ⚠️
9. [ ] **중복 export 없는지 확인** ⚠️
10. [ ] 테스트 및 검증

### 기존 페이지 수정 시
1. [ ] 기존 데이터 구조 파악
2. [ ] 영향받는 컴포넌트 확인
3. [ ] 점진적 변경 (한 번에 하나씩)
4. [ ] **각 변경 후 즉시 문법 검증** ⚠️
5. [ ] **개발 서버 정상 작동 확인** ⚠️
6. [ ] **파일 끝에 불필요한 태그 없는지 확인** ⚠️
7. [ ] **기존 export와 충돌하지 않는지 확인** ⚠️

### 파일 편집 후 필수 검증 ⚠️ 대폭 강화!
1. [ ] **파일 끝에 `</rewritten_file>` 같은 태그 없는지 확인**
2. [ ] **JSX 컴포넌트가 `}` 로 올바르게 끝나는지 확인**
3. [ ] **동일한 컴포넌트나 함수가 중복 정의되지 않았는지 확인**
4. [ ] JSX 문법 오류 없는지 확인
5. [ ] import 문 정상 작동 확인
6. [ ] 개발 서버 컴파일 성공 확인
7. [ ] **다른 포트로 실행되지 않았는지 확인 (포트 3000 유지)**

### 개발 시작 전 필수 점검 ⚠️ 강화됨!
1. [ ] **기존 Next.js 프로세스 모두 종료**: `pkill -f "next dev"`
2. [ ] **포트 3000~3004 모두 해제**: `lsof -ti:3000,3001,3002,3003,3004 | xargs kill -9`
3. [ ] **캐시 정리**: `rm -rf .next`
4. [ ] **3초 대기**: `sleep 3`
5. [ ] **깨끗한 상태에서 시작**: `npm run dev`
6. [ ] **포트 3000에서 실행 확인**

## 🚨 에러 발생 시 대응 절차 (대폭 강화됨)

### 즉시 대응 순서 ⚠️
1. **즉시 중단**: 추가 변경 중지
2. **로그 확인**: 터미널 에러 메시지 분석
3. **프로세스 정리**: `pkill -f "next dev"` 실행 (가장 우선!)
4. **포트 완전 해제**: `lsof -ti:3000,3001,3002,3003,3004 | xargs kill -9`
5. **캐시 클리어**: `rm -rf .next` 실행
6. [ ] **3초 대기**: `sleep 3`
7. **재시작**: `npm run dev` 실행
8. **포트 확인**: 포트 3000에서 실행되는지 확인
9. **단계별 롤백**: 여전히 문제 시 마지막 작동 상태로 복원

### 에러 유형별 대응 ⚠️ 대폭 강화!

#### JSX 문법 오류 (가장 빈번)
- **증상**: `Unexpected token 'div'. Expected jsx identifier`
- **대응**: 
  1. **파일 끝에 `</rewritten_file>` 같은 텍스트 즉시 제거**
  2. 컴포넌트 함수 구조 검증
  3. return 문 위치 확인
  4. **함수 닫는 괄호 `}` 확인**
  5. **파일이 JSX 컴포넌트로만 끝나는지 확인**

#### 컴포넌트 중복 Export 오류 (새로 추가)
- **증상**: `Exported identifiers must be unique`
- **대응**:
  1. **파일에서 중복된 함수나 컴포넌트 정의 찾기**
  2. **하나만 남기고 나머지 제거**
  3. **파일 전체를 다시 작성하는 것이 더 안전할 수 있음**
  4. **저장 후 즉시 컴파일 확인**

#### 파일 끝 태그 오염 (새로 추가)
- **증상**: `Expression expected`, `Unexpected eof`
- **대응**:
  1. **파일 끝으로 이동하여 `</rewritten_file>` 태그 제거**
  2. **마지막 라인이 `}` 인지 확인**
  3. **저장 후 즉시 컴파일 확인**

#### 빈 페이지 컴포넌트 오류 (새로 추가)
- **증상**: `The default export is not a React Component`
- **대응**:
  1. 해당 페이지 파일 확인
  2. 기본 React 컴포넌트 구조 작성
  3. default export 확인

#### 다중 포트 충돌 (강화됨)
- **증상**: `Port 3000 is in use, trying 3001 instead`
- **대응**:
  1. **즉시 모든 개발 서버 종료**: `pkill -f "next dev"`
  2. **모든 관련 포트 강제 해제**: `lsof -ti:3000,3001,3002,3003,3004 | xargs kill -9`
  3. **5초 대기**: `sleep 5`
  4. **재시작**: `npm run dev`
  5. **포트 3000에서 실행되는지 확인**

#### 모듈 오류
- **증상**: `Cannot find module './vendor-chunks/lucide-react.js'`, `Cannot find module './638.js'`
- **대응**:
  1. **모든 프로세스 종료**: `pkill -f "next dev"`
  2. **캐시 완전 삭제**: `rm -rf .next`
  3. `node_modules` 재설치 (`npm install`)
  4. 개발 서버 재시작

#### 캐시 오류
- **증상**: `PackFileCacheStrategy` 관련 오류
- **대응**:
  1. 모든 Next.js 프로세스 종료
  2. `.next` 폴더 완전 삭제
  3. 새로운 터미널에서 재시작

### 응급 복구 명령어 ⚠️ 대폭 강화!
```bash
# 완전 리셋 (가장 강력한 해결책)
pkill -f "next dev"
lsof -ti:3000,3001,3002,3003,3004 | xargs kill -9 2>/dev/null || true
sleep 5
rm -rf .next
rm -rf node_modules
npm install
npm run dev

# 빠른 리셋 (일반적인 경우)
pkill -f "next dev" && lsof -ti:3000,3001,3002,3003,3004 | xargs kill -9 2>/dev/null && sleep 3 && rm -rf .next && npm run dev

# 포트 확인 및 정리
lsof -ti:3000,3001,3002,3003,3004
pkill -f "next dev"

# 프로세스 상태 확인
ps aux | grep "next dev"

# 포트 강제 해제 (극단적인 경우)
sudo lsof -ti:3000,3001,3002,3003,3004 | xargs sudo kill -9
```

## ⚡ 긴급 상황 대응 매뉴얼 ⚠️ 대폭 강화!

### 개발 서버가 시작되지 않을 때
1. **모든 Next.js 프로세스 종료**: `pkill -f "next dev"`
2. **모든 관련 포트 해제**: `lsof -ti:3000,3001,3002,3003,3004 | xargs kill -9`
3. **5초 대기**: `sleep 5`
4. **캐시 완전 삭제**: `rm -rf .next`
5. **재시작**: `npm run dev`
6. **포트 3000 확인**: 다른 포트로 실행되면 1번부터 재시도

### 빌드가 계속 실패할 때
1. **프로세스 정리**: `pkill -f "next dev"`
2. **의존성 재설치**: `rm -rf node_modules && npm install`
3. **TypeScript 캐시 삭제**: `rm -rf .next/cache`
4. **문법 오류 파일 찾기**: 에러 로그에서 파일 경로 확인
5. **해당 파일의 JSX 구조 검증**
6. **파일 끝 태그 오염 검사**
7. **중복 export 검사**

### 여러 포트에서 서버가 실행될 때 (강화됨)
1. **모든 프로세스 확인**: `ps aux | grep "next dev"`
2. **전체 종료**: `pkill -f "next"`
3. **모든 포트 사용 현황 확인**: `lsof -ti:3000,3001,3002,3003,3004`
4. **강제 해제**: `lsof -ti:3000,3001,3002,3003,3004 | xargs kill -9`
5. **5초 대기**: `sleep 5`
6. **포트 3000에서만 실행**: `npm run dev`
7. **실행 포트 확인**: 터미널에서 `Local: http://localhost:3000` 확인

### JSX 문법 오류가 계속 발생할 때 (새로 추가)
1. **에러 파일 확인**: 터미널에서 파일 경로와 라인 번호 확인
2. **파일 끝 검사**: `</rewritten_file>` 같은 태그 제거
3. **return 문 위치 확인**: 함수 내부에 올바르게 위치하는지 확인
4. **괄호 짝 맞추기**: `{`, `}`, `(`, `)` 짝이 맞는지 확인
5. **컴포넌트 구조 검증**: 함수형 컴포넌트 구조가 올바른지 확인
6. **중복 정의 검사**: 같은 함수나 컴포넌트가 여러 번 정의되지 않았는지 확인

### 컴포넌트 중복 오류 발생 시 (새로 추가)
1. **오류 파일 열기**: 터미널에서 지정된 파일 확인
2. **전체 파일 스캔**: 동일한 함수명이나 컴포넌트명 검색
3. **중복 제거**: 하나만 남기고 나머지 삭제
4. **파일 재작성**: 심각한 경우 파일 전체를 새로 작성
5. **즉시 테스트**: 저장 후 컴파일 오류 해결 확인

---

**마지막 업데이트**: 2024년 12월 (컴포넌트 중복 export, 다중 포트 충돌 대응 대폭 강화)
**담당자**: Safe Pet Food 개발팀 